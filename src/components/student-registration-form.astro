---
import Button from "./Button.astro";
import { useTranslations, getLangFromUrl } from "../i18n/utils";
import type { StudentRegistrationDetails } from "../types";

interface Props {
	additionalDetails: StudentRegistrationDetails;
}

console.log(Astro.props.additionalDetails);
const t = useTranslations(getLangFromUrl(Astro.url));
---

<div>
	<form
		id="registration-form"
		class="gap-y-2 transition-opacity grid grid-cols-2 gap-x-3"
		enctype="multipart/form-data"
	>
		<div class="col-span-full">
			<label for="name" class="block mb-1 font-medium"
				>{t("student_register__form_name")}*</label
			>
			<input
				autofocus
				id="name"
				name="name"
				required
				type="text"
				class="w-full border px-3 py-2 rounded uppercase"
			/>
			<span class="error-message"></span>
		</div>
		<div>
			<label for="nic" class="block mb-1 font-medium"
				>{t("student_register__form_nic_no")}*</label
			>
			<input
				id="nic"
				name="nic"
				type="text"
				required
				class="w-full border px-3 py-2 rounded capitalize"
			/>
			<span class="error-message"></span>
		</div>

		<div>
			<label for="school" class="block mb-1 font-medium"
				>{t("student_register__form_school")}</label
			>
			<input
				id="school"
				name="school"
				type="text"
				class="w-full border px-3 py-2 rounded uppercase"
			/>
			<span class="error-message"></span>
		</div>

		<div class="col-span-2">
			<label for="address" class="block mb-1 font-medium"
				>{t("student_register__form_permanent_address")}*</label
			>
			<textarea
				id="address"
				name="address"
				class="w-full border px-3 py-2 rounded uppercase resize-y min-h-20"
				rows="3"
				required></textarea>
			<span class="error-message"></span>
		</div>

		<div>
			<label for="phone" class="block mb-1 font-medium"
				>{t("student_register__form_phone_no")}*</label
			>
			<input
				id="phone"
				name="phone"
				type="tel"
				required
				class="w-full border px-3 py-2 rounded"
			/>
			<span class="error-message"></span>
		</div>

		<div>
			<label for="email" class="block mb-1 font-medium"
				>{t("student_register__form_email")}*</label
			>
			<input
				id="email"
				name="email"
				type="email"
				required
				class="w-full border px-3 py-2 rounded"
			/>
			<span class="error-message"></span>
		</div>

		<div>
			<label for="gender" class="block mb-1 font-medium"
				>{t("student_register__form_gender")}*</label
			>
			<select
				id="gender"
				name="gender"
				required
				class="w-full border px-3 py-2 rounded"
			>
				<option value="">Select</option>
				<option value="Male">MALE</option>
				<option value="Female">FEMALE</option>
			</select>
			<span class="error-message"></span>
		</div>
		<div>
			<label for="medium" class="block mb-1 font-medium"
				>{t("student_register__form_medium")}*</label
			>
			<select
				id="medium"
				name="medium"
				required
				class="w-full border px-3 py-2 rounded"
			>
				<option value="">Select</option>
				<option value="Tamil">TAMIL</option>
				<option value="English">ENGLISH</option>
			</select>
			<span class="error-message"></span>
		</div>

		<div>
			<label for="stream" class="block mb-1 font-medium"
				>{t("student_register__form_stream")}*</label
			>
			<select
				id="stream"
				name="stream"
				required
				class="w-full border px-3 py-2 rounded"
			>
				<option value="">Select</option>
				<option value="2">Physical Science (Maths, Physics, Chemistry)</option>
				<option value="4"
					>Biological Science (Biology, Physics, Chemistry)</option
				>
				<option value="3">Other (Maths, Physics, ICT)</option>
				<option value="1">ICT Only</option>
			</select>
			<span class="error-message"></span>
		</div>

		<div>
			<label for="rankDistrict" class="block mb-1 font-medium"
				>{t("student_register__form_district_ranking")}*</label
			>
			<select
				id="rankDistrict"
				name="district_ranking"
				required
				class="w-full border px-3 py-2 rounded"
			>
				<option value="">Select</option>
				{
					Astro.props.additionalDetails.districts.map((district) => (
						<option value={district.id}>{district.district_name}</option>
					))
				}
			</select>
			<span class="error-message"></span>
		</div>

		<div>
			<label for="examDistrict" class="block mb-1 font-medium"
				>{t("student_register__form_district_sitting")}*</label
			>
			<select
				id="examDistrict"
				name="district_exam"
				required
				class="w-full border px-3 py-2 rounded"
			>
				<option value="">Select</option>
				{
					Astro.props.additionalDetails.districts.map((district) => (
						<option value={district.id}>{district.district_name}</option>
					))
				}
			</select>
			<span class="error-message"></span>
		</div>

		<div>
			<label for="examCenter" class="block mb-1 font-medium"
				>{t("student_register__form_exam_centre")}*</label
			>
			<select
				id="examCenter"
				name="exam_centre"
				class="w-full border px-3 py-2 rounded"
				required
				disabled
			>
				<option value="">Select</option>
			</select>
			<span class="error-message"></span>
		</div>

		<div
			class="col-span-full flex flex-col justify-center w-full"
			id="dropzone"
		>
			<label for="dropzone-file" class="!w-full h-40">
				<span class="mb-1 font-medium"
					>{t("student_register__form_upload_bank_receipt")}*</span
				>
				<div
					class="flex flex-col items-center justify-center pt-2 pb-2 border-2 border-gray-300 border-dashed bg-gray-50 hover:bg-gray-100 rounded-lg"
				>
					<svg
						class="w-8 h-8 text-gray-600"
						aria-hidden="true"
						xmlns="http://www.w3.org/2000/svg"
						fill="none"
						viewBox="0 0 20 16"
					>
						<path
							stroke="currentColor"
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2"
							d="M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2"
						></path>
					</svg>
					<p class="mb-1 text-sm text-gray-600">
						<span class="font-semibold">Click to upload</span> or drag and drop
					</p>
					<p class="text-xs text-gray-600">
						Accepted formats: <span class="font-medium"
							>.jpg, .jpeg, .png, .pdf</span
						> â€” Max file size: <span class="font-medium">5MB</span>
					</p>
				</div>
			</label>
			<input
				required
				id="dropzone-file"
				type="file"
				class="hidden"
				name="payment_receipt"
			/>
			<span class="error-message"></span>
		</div>

		<div class="col-span-2 justify-between flex items-center">
			<span class="error text-red-600"> </span>
			<Button id="submit" type="button">Submit</Button>
		</div>
	</form>
	<script
		set:html={`const additionalDetails = JSON.parse('${JSON.stringify(Astro.props.additionalDetails)}');`}
	/>

	<script>
		import { registerStudent } from "../services/studentRegistrationService";
		import type { StudentRegistrationDetails } from "../types";

		declare const additionalDetails: StudentRegistrationDetails;

		function showError(field: string, message: string) {
			if (!field) {
				return;
			}
			let errorElement = document.querySelector(
				`*[name=${field}] + .error-message`,
			);
			if (!errorElement) {
				return;
			}
			errorElement.parentElement.classList.add("error");
			errorElement.textContent = message;
		}

		function clearError(field: string) {
			if (!field) {
				return;
			}
			let errorElement = document.querySelector(
				`*[name=${field}] + .error-message`,
			);
			if (!errorElement) {
				return;
			}
			errorElement.parentElement.classList.remove("error");
			errorElement.textContent = "";
		}

		function validateRegistrationForm(form: HTMLFormElement): boolean {
			let isValid = true;

			const inputs = form.querySelectorAll<
				HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
			>(
				"input[type='text'][required], input[type='email'][required], input[type='tel'][required], select[required], textarea[required]",
			);
			for (const input of inputs) {
				if (input.value.trim() === "") {
					showError(input.name, "This field is required.");
					isValid = false;
				} else if (
					input.name === "nic" &&
					!/^\d{9}([vV]|\d{3})$/.test(input.value)
				) {
					showError(input.name, "Invalid NIC format.");
					isValid = false;
				} else if (
					input.name === "email" &&
					!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(input.value)
				) {
					showError(input.name, "Invalid email format.");
					isValid = false;
				} else if (input.name === "phone" && !/^\d{10}$/.test(input.value)) {
					showError(input.name, "Invalid phone number.");
				} else if (input.name === "name" && input.value.length < 3) {
					showError(
						input.name,
						"Full name must be at least 3 characters long.",
					);
					isValid = false;
				} else if (input.name === "address" && input.value.length < 5) {
					showError(input.name, "Address must be at least 5 characters long.");
					isValid = false;
				} else {
					clearError(input.name);
				}
			}

			const fileInputs = form.querySelectorAll<HTMLInputElement>(
				"input[type='file'][required]",
			);

			for (const fileInput of fileInputs) {
				console.log(fileInput.files.length);
				if (!fileInput.files || fileInput.files.length === 0) {
					showError(fileInput.name, "You have to upload the file.");
					isValid = false;
				} else {
					clearError(fileInput.name);
				}
			}

			return isValid;
		}

		function clearAllErrors(form: HTMLFormElement) {
			const errorElements = form.querySelectorAll(".error-message");
			for (const errorElement of errorElements) {
				errorElement.textContent = "";
			}
		}

		const examCentreSelector =
			document.querySelector<HTMLSelectElement>("select#examCenter");
		if (!examCentreSelector) {
			console.error("Exam centre selector not found.");
		}

		function setCorrectExamCentres(districtSittingId: number) {
			examCentreSelector.disabled = true;
			if (!additionalDetails) {
				console.error("Exam centers data is not available.");
				return;
			}

			const availableExamCenters = additionalDetails.districts.find(
				(district) => district.id === districtSittingId,
			).exam_centres;

			for (const option of examCentreSelector.querySelectorAll("option")) {
				if (option.value !== "") {
					option.remove();
				}
			}

			for (const centre of availableExamCenters) {
				const option = document.createElement("option");
				option.value = centre.id.toString();
				option.textContent = centre.name;
				examCentreSelector.appendChild(option);
			}
			examCentreSelector.disabled = false;
		}

		document.addEventListener("DOMContentLoaded", () => {
			const districtSelect = document.getElementById("examDistrict");
			if (!districtSelect) {
				console.error("Exam district select element not found.");
				return;
			}

			districtSelect.addEventListener("change", () => {
				const selectedDistrict = (districtSelect as HTMLSelectElement).value;
				setCorrectExamCentres(Number.parseInt(selectedDistrict));
			});
		});

		const submitButton =
			document.querySelector<HTMLButtonElement>("button#submit");
		const form = document.querySelector<HTMLFormElement>(
			"form#registration-form",
		);

		form.addEventListener("input", (event) => {
			const target = event.target;

			if (
				!(target instanceof HTMLInputElement) &&
				!(target instanceof HTMLSelectElement) &&
				!(target instanceof HTMLTextAreaElement)
			) {
				return;
			}

			if (!target.required) {
				return;
			}

			const isError = target.parentElement.className.includes("error");
			if (!isError) {
				return;
			}
			clearError(target.name);
		});

		submitButton.addEventListener("click", async () => {
			if (!validateRegistrationForm(form)) {
				return;
			}
			const d = new FormData(form);
			for (const [key, value] of d.entries()) {
				if (value instanceof File) {
					console.log(`${key}: ${value.name} (${value.size} bytes)`);
				} else {
					console.log(`${key}: ${value}`);
				}
			}

			try {
				const result = await registerStudent(d);

				if (typeof result === "string" && result.startsWith("Failed")) {
					alert(result);
					return;
				}

				alert("Registration successful!");
			} catch (err) {
				console.error(err);
				alert("Something went wrong while submitting your registration.");
			}

			// const lang = window.location.pathname.split("/")[1];
			// window.location.href = `./submitted_details`;
		});

		const dropzone = document.getElementById("dropzone");
		const fileInput = document.getElementById(
			"dropzone-file",
		) as HTMLInputElement;

		if (dropzone && fileInput) {
			// When you drag files over
			dropzone.addEventListener("dragover", (e) => {
				e.preventDefault();
			});

			// When you drop files
			dropzone.addEventListener("drop", (e) => {
				e.preventDefault();

				const dt = (e as DragEvent).dataTransfer;
				if (!dt) return;

				const files = dt.files;
				if (files.length > 0) {
					fileInput.files = files;

					const label = (e.target as Element).closest("label");
					if (label) {
						const p = label.querySelector("p");
						if (p) p.textContent = `Selected: ${files[0].name}`;
					}
				}
			});

			// When user selects file(s) via file picker
			fileInput.addEventListener("change", () => {
				clearError("payment_receipt");

				const files = fileInput.files;
				if (files && files.length > 0) {
					// Get the label that wraps the file input
					const label = fileInput.parentElement; // This is the label element
					if (label) {
						const p = label.querySelector("p");
						if (p) p.textContent = `Selected: ${files[0].name}`;
					}
				}
			});
		}
	</script>
</div>

<style>
	label {
		@apply w-fit;
	}
	input,
	select,
	label {
		@apply cursor-pointer;
	}
	.error-message {
		@apply text-red-600 text-sm;
	}
	div.error {
		@apply text-red-600;

		input {
			@apply border-red-500 border-2 focus:ring-red-500;
		}
	}
</style>

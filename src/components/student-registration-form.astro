---
import Button from "./Button.astro";
import { useTranslations, getLangFromUrl } from "../i18n/utils";
import type { StudentRegistrationDetails } from "../types";
import StudentRegistrationConfirmation from "./student-registration-confirmation.astro";

interface Props {
	additionalDetails: StudentRegistrationDetails;
}

const t = useTranslations(getLangFromUrl(Astro.url));
---

<div>
	<form
		id="registration-form"
		class="gap-y-2 transition-opacity grid grid-cols-1 md:grid-cols-2 gap-x-3"
		enctype="multipart/form-data"
	>
		<div class="col-span-full form-field">
			<label for="name" class="block mb-1 font-medium"
				>{t("student_register__form_name")}</label
			>
			<input
				autofocus
				id="name"
				name="name"
				required
				type="text"
				class="w-full border px-3 py-2 rounded uppercase"
			/>
			<span class="error-message"></span>
		</div>
		<div class="form-field">
			<label for="nic" class="block mb-1 font-medium"
				>{t("student_register__form_nic_no")}</label
			>
			<input
				id="nic"
				name="nic"
				type="text"
				required
				class="w-full border px-3 py-2 rounded uppercase"
			/>
			<span class="error-message"></span>
		</div>

		<div class="form-field">
			<label for="school" class="block mb-1 font-medium"
				>{t("student_register__form_school")}</label
			>
			<input
				id="school"
				name="school"
				type="text"
				class="w-full border px-3 py-2 rounded uppercase"
			/>
			<span class="error-message"></span>
		</div>

		<div class="col-span-full form-field">
			<label for="address" class="block mb-1 font-medium"
				>{t("student_register__form_permanent_address")}</label
			>
			<textarea
				id="address"
				name="address"
				class="w-full border px-3 py-2 rounded uppercase resize-y min-h-20"
				rows="3"
				required></textarea>
			<span class="error-message"></span>
		</div>

		<div class="form-field">
			<label for="phone" class="block mb-1 font-medium"
				>{t("student_register__form_phone_no")}</label
			>
			<input
				id="phone"
				name="phone"
				type="tel"
				required
				class="w-full border px-3 py-2 rounded"
			/>
			<span class="error-message"></span>
		</div>

		<div class="form-field">
			<label for="email" class="block mb-1 font-medium"
				>{t("student_register__form_email")}</label
			>
			<input
				id="email"
				name="email"
				type="email"
				required
				class="w-full border px-3 py-2 rounded uppercase"
			/>
			<span class="error-message"></span>
		</div>

		<div class="form-field">
			<label for="gender" class="block mb-1 font-medium"
				>{t("student_register__form_gender")}</label
			>
			<select
				id="gender"
				name="gender"
				required
				class="w-full border px-3 py-2 rounded"
			>
				<option value="">Select</option>
				<option value="Male">MALE</option>
				<option value="Female">FEMALE</option>
			</select>
			<span class="error-message"></span>
		</div>
		<div class="form-field">
			<label for="medium" class="block mb-1 font-medium"
				>{t("student_register__form_medium")}</label
			>
			<select
				id="medium"
				name="medium"
				required
				class="w-full border px-3 py-2 rounded"
			>
				<option value="">Select</option>
				<option value="Tamil">TAMIL</option>
				<option value="English">ENGLISH</option>
			</select>
			<span class="error-message"></span>
		</div>

		<div class="form-field">
			<label for="stream" class="block mb-1 font-medium"
				>{t("student_register__form_stream")}</label
			>
			<select
				id="stream"
				name="stream"
				required
				class="w-full border px-3 py-2 rounded"
			>
				<option value="">Select</option>
				<option value="2">Physical Science (Maths, Physics, Chemistry)</option>
				<option value="4"
					>Biological Science (Biology, Physics, Chemistry)</option
				>
				<option value="3">Other (Maths, Physics, ICT)</option>
				<option value="1">ICT Only</option>
			</select>
			<span class="error-message"></span>
		</div>

		<div class="form-field">
			<label for="rankDistrict" class="block mb-1 font-medium"
				>{t("student_register__form_district_ranking")}</label
			>
			<select
				id="rankDistrict"
				name="district_ranking"
				required
				class="w-full border px-3 py-2 rounded"
			>
				<option value="">Select</option>
				{
					Astro.props.additionalDetails.districts.map((district) => (
						<option value={district.id}>{district.district_name}</option>
					))
				}
			</select>
			<span class="error-message"></span>
		</div>

		<div class="form-field">
			<label for="examDistrict" class="block mb-1 font-medium"
				>{t("student_register__form_district_sitting")}</label
			>
			<select
				id="examDistrict"
				name="district_exam"
				required
				class="w-full border px-3 py-2 rounded"
			>
				<option value="">Select</option>
				{
					Astro.props.additionalDetails.districts.map((district) => (
						<option value={district.id}>{district.district_name}</option>
					))
				}
			</select>
			<span class="error-message"></span>
		</div>

		<div class="form-field">
			<label for="examCentre" class="block mb-1 font-medium"
				>{t("student_register__form_exam_centre")}</label
			>
			<select
				id="examCentre"
				name="exam_centre"
				class="w-full border px-3 py-2 rounded"
				required
				disabled
			>
				<option value="">Select</option>
			</select>
			<span class="error-message"></span>
		</div>

		<div
			class="col-span-full flex flex-col justify-center w-full no-asterisk form-field"
			id="dropzone"
		>
			<label for="dropzone-file" class="!w-full h-40">
				<span class="mb-1 font-medium"
					>{t("student_register__form_upload_bank_receipt")}</span
				>
				<div
					class="flex flex-col items-center justify-center pt-2 pb-2 border-2 border-gray-300 border-dashed bg-gray-50 hover:bg-gray-100 rounded-lg"
				>
					<svg
						class="w-8 h-8 text-gray-600"
						aria-hidden="true"
						xmlns="http://www.w3.org/2000/svg"
						fill="none"
						viewBox="0 0 20 16"
					>
						<path
							stroke="currentColor"
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2"
							d="M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2"
						></path>
					</svg>
					<p class="mb-1 text-sm text-gray-600">
						<span class="font-semibold">Click to upload</span> or drag and drop
					</p>
					<p class="text-xs text-gray-600">
						Accepted formats: <span class="font-medium"
							>.jpg, .jpeg, .png, .pdf</span
						> â€” Max file size: <span class="font-medium">5MB</span>
					</p>
				</div>
			</label>
			<input
				required
				id="dropzone-file"
				type="file"
				class="hidden"
				name="payment_receipt"
				accept=".jpg,.jpeg,.png,.pdf"
			/>
			<span class="error-message"></span>
		</div>

		<div class="col-span-full justify-between flex items-center">
			<span class="form-response"> </span>
			<Button id="submit" type="button">Submit</Button>
		</div>
	</form>
	<StudentRegistrationConfirmation />
	<script
		set:html={`const additionalDetails = JSON.parse('${JSON.stringify(Astro.props.additionalDetails).replaceAll("'", "\\'")}');`}
	/>

	<script>
		import { validateStudentRegistrationDetails } from "../services/studentRegistrationService";
		import type { StudentRegistrationDetails } from "../types";
		import {
			clearError,
			validateRegistrationForm,
			showError,
			addUnsavedChangesWarning,
			showFormResponse,
		} from "../utils/form-validators";
		import { humanReadableFileSize } from "../utils/utils";

		declare const additionalDetails: StudentRegistrationDetails;

		const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB

		const examCentreSelector =
			document.querySelector<HTMLSelectElement>("select#examCentre");
		if (!examCentreSelector) {
			console.error("Exam centre selector not found.");
		}

		const genderSelect = document.querySelector("select#gender");
		if (!genderSelect) {
			console.error("Gender selector not found.");
		}

		const streamSelect = document.querySelector("select#stream");
		if (!streamSelect) {
			console.error("Stream selector not found.");
		}

		function enableGenderSpecificCentres(gender: string) {
			if (!additionalDetails) {
				console.error("Exam centers data is not available.");
				return;
			}

			const examCentreOptions = examCentreSelector.querySelectorAll("option");
			examCentreOptions.forEach((option) => {
				if (option.innerText.startsWith(`(${gender} Only)`)) {
					option.disabled = false;
				}
			});
		}

		function disableStreamSpecificCentres() {
			if (!additionalDetails) {
				console.error("Exam centers data is not available.");
				return;
			}

			const examCentreOptions = examCentreSelector.querySelectorAll("option");
			const stream = (streamSelect as HTMLSelectElement).value;

			examCentreOptions.forEach((option) => {
				if (option.innerText.endsWith("(IT Only)")) {
					option.disabled = stream !== "1";
				}
			});
		}

		function setCorrectExamCentres(districtSittingId: number) {
			examCentreSelector.disabled = true;
			if (!additionalDetails) {
				console.error("Exam centers data is not available.");
				return;
			}

			const availableExamCenters = additionalDetails.districts.find(
				(district) => district.id === districtSittingId,
			).exam_centres;

			for (const option of examCentreSelector.querySelectorAll("option")) {
				if (option.value !== "") {
					option.remove();
				}
			}

			for (const centre of availableExamCenters) {
				const option = document.createElement("option");
				option.value = centre.id.toString();
				option.textContent = centre.name;
				option.disabled =
					centre.name.startsWith("(Female Only)") ||
					centre.name.startsWith("(Male Only)");
				examCentreSelector.appendChild(option);
			}

			const selectedGender = (genderSelect as HTMLSelectElement).value;
			if (selectedGender) {
				enableGenderSpecificCentres(selectedGender);
			}

			disableStreamSpecificCentres();
			examCentreSelector.disabled = false;
		}

		document.addEventListener("DOMContentLoaded", () => {
			const districtSelect = document.getElementById("examDistrict");
			if (!districtSelect) {
				console.error("Exam district select element not found.");
				return;
			}

			districtSelect.addEventListener("change", () => {
				const selectedDistrict = (districtSelect as HTMLSelectElement).value;
				setCorrectExamCentres(Number.parseInt(selectedDistrict));
			});

			genderSelect.addEventListener("change", () => {
				const selectedGender = (genderSelect as HTMLSelectElement).value;
				if (!selectedGender) return;
				setCorrectExamCentres(
					Number.parseInt((districtSelect as HTMLSelectElement).value),
				);
			});

			streamSelect.addEventListener("change", () => {
				disableStreamSpecificCentres();
			});
		});

		const form = document.querySelector<HTMLFormElement>(
			"form#registration-form",
		);

		form.addEventListener("input", (event) => {
			const target = event.target;
			addUnsavedChangesWarning();

			if (
				!(target instanceof HTMLInputElement) &&
				!(target instanceof HTMLSelectElement) &&
				!(target instanceof HTMLTextAreaElement)
			) {
				return;
			}

			if (!target.required) {
				return;
			}

			const isError = target.parentElement.className.includes("error");
			if (!isError) {
				return;
			}
			clearError(target.name);
		});
		function showPopupConfirmation() {
			const d = document.querySelector("dialog");
			const form = document.querySelector<HTMLFormElement>(
				"form#registration-form",
			);

			d.querySelectorAll("[data-name]").forEach((el) => {
				const name = el.getAttribute("data-name");
				if (!name) return;
				const input = form.querySelector(`[name=${name}]`);
				if (input instanceof HTMLInputElement) {
					el.textContent = input.value;

					if (input.type !== "email") {
						el.textContent = el.textContent.toUpperCase();
					}
				} else if (input instanceof HTMLSelectElement) {
					el.textContent = input.options[input.selectedIndex].text;
					if (el.textContent === "Select") {
						el.textContent = "N/A";
					}
				} else if (input instanceof HTMLTextAreaElement) {
					el.textContent = input.value.trim().toUpperCase() || "N/A";
				} else if (input instanceof HTMLInputElement && input.type === "file") {
					const fileList = input.files;
					if (fileList && fileList.length > 0) {
						el.textContent = fileList[0].name;
					} else {
						el.textContent = "No file selected";
					}
				} else {
					el.textContent = "N/A";
				}
			});

			d.showModal();
		}

		const submitButton =
			document.querySelector<HTMLButtonElement>("button#submit");
		submitButton.addEventListener("click", async () => {
			showFormResponse("reset", "");
			if (!validateRegistrationForm(form)) {
				return;
			}
			const d = new FormData(form);

			const result = await validateStudentRegistrationDetails(d);

			if (typeof result === "string") {
				showFormResponse("error", result || "Something went wrong.");
				return;
			}

			showPopupConfirmation();
		});

		const dropzone = document.getElementById("dropzone");
		const fileInput = document.getElementById(
			"dropzone-file",
		) as HTMLInputElement;

		function addPaymentReceiptFiles(files: FileList) {
			if (!files || !fileInput || !dropzone) return;

			if (files.length === 0) {
				return;
			}

			if (files.length > 1) {
				showError("payment_receipt", "Only one file can be uploaded.");
				return;
			}

			const file = files[0];
			if (file.size > MAX_FILE_SIZE) {
				showError(
					"payment_receipt",
					`File size exceeds ${humanReadableFileSize(MAX_FILE_SIZE)}.`,
				);
				return;
			}

			const type = file.type;
			if (
				type !== "image/jpeg" &&
				type !== "image/png" &&
				type !== "application/pdf"
			) {
				showError(
					"payment_receipt",
					`Invalid file type. Only .jpg, .jpeg, .png, .pdf are allowed.`,
				);
				return;
			}

			const label = fileInput.parentElement;
			if (label) {
				const p = label.querySelector("p");
				if (p)
					p.textContent = `Selected: ${files[0].name} (${humanReadableFileSize(files[0].size)})`;
			}
		}

		if (dropzone && fileInput) {
			// When you drag files over
			dropzone.addEventListener("dragover", (e) => {
				e.preventDefault();
			});

			// When files are dropped
			dropzone.addEventListener("drop", (e) => {
				e.preventDefault();
				const dt = (e as DragEvent).dataTransfer;
				if (!dt) return;
				addPaymentReceiptFiles(dt.files);
			});

			// When user selects file(s) via file picker
			fileInput.addEventListener("change", () => {
				clearError("payment_receipt");
				addPaymentReceiptFiles(fileInput.files);
			});
		}
	</script>
</div>

<style>
	label {
		@apply w-fit;
	}
	input,
	select,
	label {
		@apply cursor-pointer;
	}
	.error-message {
		@apply text-red-600 text-xs h-[1.25em] mt-[2px] block;
	}
	div.error {
		@apply text-red-600;

		input {
			@apply border-red-500 border-2 focus:ring-red-500;
		}
	}

	div.form-field:not(.no-asterisk):has(
			select[required],
			input[required],
			textarea[required]
		)
		label {
		&::after {
			@apply text-red-600;
			content: "*";
		}
	}
</style>

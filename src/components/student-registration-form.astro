---
import Button from "./Button.astro";
import { useTranslations, getLangFromUrl } from "../i18n/utils";
const t = useTranslations(getLangFromUrl(Astro.url));
---

<div>
	<form
		id="registration-form"
		class="gap-y-2 transition-opacity grid grid-cols-2 gap-x-3"
		enctype="multipart/form-data"
	>
		<div class="col-span-full">
			<label for="fullname" class="block mb-1 font-medium">Full Name*</label>
			<input
				autofocus
				id="fullname"
				name="fullname"
				required
				type="text"
				class="w-full border px-3 py-2 rounded uppercase"
			/>
			<span class="error-message"></span>
		</div>
		<div>
			<label for="nic" class="block mb-1 font-medium">NIC No.*</label>
			<input
				id="nic"
				name="nic"
				type="text"
				required
				class="w-full border px-3 py-2 rounded"
			/>
			<span class="error-message"></span>
		</div>

		<div>
			<label for="school" class="block mb-1 font-medium">School</label>
			<input
				id="school"
				name="school"
				type="text"
				class="w-full border px-3 py-2 rounded uppercase"
			/>
			<span class="error-message"></span>
		</div>

		<div class="col-span-2">
			<label for="address" class="block mb-1 font-medium"
				>Permanent Address*</label
			>
			<textarea
				id="address"
				name="address"
				class="w-full border px-3 py-2 rounded uppercase resize-y min-h-20"
				rows="3"
				required></textarea>
			<span class="error-message"></span>
		</div>

		<div>
			<label for="phone" class="block mb-1 font-medium">Phone Number*</label>
			<input
				id="phone"
				name="phone"
				type="tel"
				required
				class="w-full border px-3 py-2 rounded"
			/>
			<span class="error-message"></span>
		</div>

		<div>
			<label for="email" class="block mb-1 font-medium">E-mail*</label>
			<input
				id="email"
				name="email"
				type="email"
				required
				class="w-full border px-3 py-2 rounded"
			/>
			<span class="error-message"></span>
		</div>

		<div>
			<label for="gender" class="block mb-1 font-medium">Gender*</label>
			<select
				id="gender"
				name="gender"
				required
				class="w-full border px-3 py-2 rounded"
			>
				<option value="">Select</option>
				<option value="MALE">MALE</option>
				<option value="FEMALE">FEMALE</option>
			</select>
			<span class="error-message"></span>
		</div>
		<div>
			<label for="medium" class="block mb-1 font-medium">Medium*</label>
			<select
				id="medium"
				name="medium"
				required
				class="w-full border px-3 py-2 rounded"
			>
				<option value="">Select</option>
				<option value="ENGLISH">ENGLISH</option>
				<option value="TAMIL">TAMIL</option>
			</select>
			<span class="error-message"></span>
		</div>

		<!-- <div>
						<label for="streamDetails" class="block mb-1 font-medium"
							>Stream and Exam Centre Details</label
						>
						<input
							id="streamDetails"
							name="streamDetails"
							class="w-full border px-3 py-2 rounded"
						/>
					</div> -->

		<div>
			<label for="stream" class="block mb-1 font-medium">Stream*</label>
			<select
				id="stream"
				name="stream"
				required
				class="w-full border px-3 py-2 rounded"
			>
				<option value="">Select</option>
				<option>Physical Science (Maths, Physics, Chemistry)</option>
				<option>Biological Science (Biology, Physics, Chemistry)</option>
				<option>Other (Maths, Physics, ICT)</option>
				<option>ICT Only</option>
			</select>
			<span class="error-message"></span>
		</div>

		<div>
			<label for="rankDistrict" class="block mb-1 font-medium"
				>District for Ranking*</label
			>
			<select
				id="rankDistrict"
				name="rankDistrict"
				required
				class="w-full border px-3 py-2 rounded"
			>
				<option value="">Select</option>
				<option>Ampara</option>
				<option>Anuradhapura</option>
				<option>Badulla</option>
				<option>Batticaloa</option>
				<option>Colombo</option>
				<option>Galle</option>
				<option>Gampaha</option>
				<option>Hambantota</option>
				<option>Jaffna</option>
				<option>Kalutara</option>
				<option>Kandy</option>
				<option>Kegalle</option>
				<option>Kilinochchi</option>
				<option>Kurunegala</option>
				<option>Mannar</option>
				<option>Matale</option>
				<option>Matara</option>
				<option>Monaragala</option>
				<option>Mullaitivu</option>
				<option>Nuwara Eliya</option>
				<option>Polonnaruwa</option>
				<option>Putalam</option>
				<option>Ratnapura</option>
				<option>Trincomalee</option>
				<option>Vavuniya</option>
			</select>
			<span class="error-message"></span>
		</div>

		<div>
			<label for="examDistrict" class="block mb-1 font-medium"
				>District for Exam Sitting*</label
			>
			<select
				id="examDistrict"
				name="examDistrict"
				required
				class="w-full border px-3 py-2 rounded"
			>
				<option value="">Select</option>
				<option value="Ampara">Ampara</option>
				<option value="Anuradhapura">Anuradhapura</option>
				<option value="Badulla">Badulla</option>
				<option value="Batticaloa">Batticaloa</option>
				<option value="Colombo">Colombo</option>
				<option value="Galle">Galle</option>
				<option value="Gampaha">Gampaha</option>
				<option value="Hambantota">Hambantota</option>
				<option value="Jaffna">Jaffna</option>
				<option value="Kalutara">Kalutara</option>
				<option value="Kandy">Kandy</option>
				<option value="Kegalle">Kegalle</option>
				<option value="Kilinochchi">Kilinochchi</option>
				<option value="Kurunegala">Kurunegala</option>
				<option value="Mannar">Mannar</option>
				<option value="Matale">Matale</option>
				<option value="Matara">Matara</option>
				<option value="Monaragala">Monaragala</option>
				<option value="Mullaitivu">Mullaitivu</option>
				<option value="Nuwara Eliya">Nuwara Eliya</option>
				<option value="Polonnaruwa">Polonnaruwa</option>
				<option value="Putalam">Putalam</option>
				<option value="Ratnapura">Ratnapura</option>
				<option value="Trincomalee">Trincomalee</option>
				<option value="Vavuniya">Vavuniya</option>
			</select>
			<span class="error-message"></span>
		</div>

		<div>
			<label for="examCenter" class="block mb-1 font-medium">Exam Center*</label
			>
			<select
				id="examCenter"
				name="examCenter"
				class="w-full border px-3 py-2 rounded"
				required
				disabled
			>
				<option value="">Select</option>
			</select>
			<span class="error-message"></span>
		</div>

		<div
			class="col-span-full flex flex-col justify-center w-full"
			id="dropzone"
		>
			<label for="dropzone-file" class="!w-full h-40">
				<span class="mb-1 font-medium"> Upload Bank Receipt*</span>
				<div
					class="flex flex-col items-center justify-center pt-2 pb-2 border-2 border-gray-300 border-dashed bg-gray-50 hover:bg-gray-100 rounded-lg"
				>
					<svg
						class="w-8 h-8 text-gray-600"
						aria-hidden="true"
						xmlns="http://www.w3.org/2000/svg"
						fill="none"
						viewBox="0 0 20 16"
					>
						<path
							stroke="currentColor"
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2"
							d="M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2"
						></path>
					</svg>
					<p class="mb-1 text-sm text-gray-600">
						<span class="font-semibold">Click to upload</span> or drag and drop
					</p>
					<p class="text-xs text-gray-600">
						Accepted formats: <span class="font-medium"
							>.jpg, .jpeg, .png, .pdf</span
						> â€” Max file size: <span class="font-medium">5MB</span>
					</p>
				</div>
			</label>
			<input
				required
				id="dropzone-file"
				type="file"
				class="hidden"
				name="payment-receipt"
			/>
			<span class="error-message"></span>
		</div>

		<div class="col-span-2 justify-between flex items-center">
			<span class="error text-red-600"> </span>
			<Button id="submit" type="button">Submit</Button>
		</div>
	</form>
	<script>
		import { registerStudent } from "../services/studentRegistrationService";

		function showError(field: string, message: string) {
			if (!field) {
				return;
			}
			let errorElement = document.querySelector(
				`*[name=${field}] + .error-message`,
			);
			if (!errorElement) {
				return;
			}
			errorElement.parentElement.classList.add("error");
			errorElement.textContent = message;
		}

		function clearError(field: string) {
			if (!field) {
				return;
			}
			let errorElement = document.querySelector(
				`*[name=${field}] + .error-message`,
			);
			if (!errorElement) {
				return;
			}
			errorElement.parentElement.classList.remove("error");
			errorElement.textContent = "";
		}

		function validateRegistrationForm(form: HTMLFormElement): boolean {
			let isValid = true;

			const inputs = form.querySelectorAll<
				HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
			>(
				"input[type='text'][required], input[type='email'][required], input[type='tel'][required], select[required], textarea[required]",
			);
			for (const input of inputs) {
				if (!input.value.trim()) {
					showError(input.name, "This field is required.");
					isValid = false;
				} else {
					clearError(input.name);
				}
			}

			const fileInputs = form.querySelectorAll<HTMLInputElement>(
				"input[type='file'][required]",
			);

			for (const fileInput of fileInputs) {
				console.log(fileInput.files.length);
				if (!fileInput.files || fileInput.files.length === 0) {
					showError(fileInput.name, "This field is required.");
					isValid = false;
				} else {
					clearError(fileInput.name);
				}
			}

			return isValid;
		}

		function clearAllErrors(form: HTMLFormElement) {
			const errorElements = form.querySelectorAll(".error-message");
			for (const errorElement of errorElements) {
				errorElement.textContent = "";
			}
		}

		const districtCenters = {
			Ampara: [
				"Select",
				"KM/Vipulananda Central College, Karaitivu",
				"KM/Zahira College, Kalmunai",
				"KM/TK/Thambiluvil Mathya Maha Vidyalayam",
				"Km/Km Carmel Fatima College",
				"Muslim Madya Maha Vidiyalayam,Sammanthurai",
				"KM/Al-Ashraq M.M.V, Nintavur",
				"Ak/As-Siraj Maha Vidyalayam",
				"Ak/Al-Irfan Ladies College, Pottuvil",
				"KM/ST/Al-Ashraf Central College, Irakkama",
				"KM/AK/AI-Hamra Maha Vidyalaya, Oluvil",
				"KM/TK/Sri Rama Krishna College",
				"AK/Addalaichenai M.M.V.",
			],

			Anuradhapura: [
				"Select",
				"A/An-Noor Maha Vidyalaya, Ikkirigollawa",
				"Kahatagasdhigiliya Muslim M.V.",
			],

			Badulla: [
				"Select",
				"B/Bandarawela Tamil Central College",
				"Saraswathi Central College",
				"B/Welimada Muslim Maha Vidyalaya",
			],

			Batticaloa: [
				"Select",
				"BT/BC/Alighar Central College",
				"BT/BT/Mahajana College",
				"BT/BC/Meera Balika National School",
				"BT/Shivananda National School",
				"BT/Paddirupu Maha Vidyalaya",
				"BT/KK/Chenkalady Central College",
				"BT/Valaichenai Hindu College",
			],

			Colombo: [
				"Select",
				"Hindu Ladies College, Colombo - 06",
				"Vivekananda National College, Kotahena",
			],

			Galle: ["Select", "G/Malharus Sulhiya Central College"],

			Gampaha: [
				"Select",
				"Al Azhar Central College, Thihariya (IT Only)",
				"Al-Muhsin Science College, Malwana",
			],

			Jaffna: [
				"Select",
				"Jaffna Hindu College",
				"Jaffna Hindu Ladies' College",
				"Chavakachcheri Hindu college",
				"J/Nelliady Central College",
				"J/Methodist Girls High School",
				"Ramanathan College",
				"Kopay Christian College",
			],

			Kalutara: ["Select", "Science Project, Dharga town (DSP)"],

			Kandy: ["Select", "K/Akurana Balika MMV", "K/Kathiresan Central College"],

			Kegalle: [
				"Select",
				"Ceylon Ladies' Campus, Warakapola",
				"KG/Mw/Zahira College, Mawanella",
			],

			Kilinochchi: ["Select", "Kilinochchi Madya Maha Vidyalayam"],

			Kurunegala: [
				"Select",
				"Annoor National School",
				"Ku/Giri/Madeena National School",
				"Giri/Kekunagolla Central College (National School) | ASDA",
			],

			Mannar: [
				"Select",
				"St.Xavier's Boys' National College",
				"Mn/Fatima M.M.V, Pesalai",
			],

			Matale: ["Select", "Pakkiyam National College"],

			Matara: [
				"Select",
				"DFEC Science Project, Dickwella",
				"MR/Arafa National School, Weligama",
			],

			Mullaitivu: [
				"Select",
				"Mulliyawalai Vidyananda College",
				"Puthukkudiyiruppu Central College",
				"Mullaitivu Maha Vidyalayam",
				"Mu/Visvamadu Maha Vidyalayam",
				"Mu/Mallavi Central College",
				"Mu/Udayarkaddu Maha Vidyalayam",
			],

			"Nuwara Eliya": [
				"Select",
				"Highlands College, Hatton",
				"Talawakelle Tamil Maha Vidyalayam",
				"Kotagala Tamil Maha Vidyalayam",
			],

			Puttalam: [
				"Select",
				"President's Science College",
				"Kadayamottai Muslim Central College",
				"Mercy Education Campus",
			],

			Trincomalee: [
				"Select",
				"T/R.K.M Sri Koneswara Hindu College",
				"T/Kinniya Al-Hira Muslim Maha Vid",
				"T/MU/Mutur Central College",
				"T/MU/Fathima Ladies' College",
			],

			Vavuniya: [
				"Select",
				"V/Rambaikkulam Girls Maha Vidyalayam",
				"V/Cheddikulam Maha Vidyalayam",
				"V/Saivapragasa Ladies' College",
				"V/Vavuniya Tamil Madhya Maha Vidyalayam",
			],

			Hambantota: ["Select", "Zahira National school, Hambantota"],
		};

		document.addEventListener("DOMContentLoaded", () => {
			const districtSelect = document.getElementById("examDistrict");
			const centerSelect = document.getElementById("examCenter");

			districtSelect.addEventListener("change", () => {
				const selectedDistrict = (districtSelect as HTMLSelectElement).value;
				centerSelect.innerHTML = ""; // clear existing options

				if (!selectedDistrict || !districtCenters[selectedDistrict]) {
					(centerSelect as HTMLSelectElement).disabled = true;
					centerSelect.innerHTML = `<option value="">Select</option>`;
					return;
				}

				// Enable and populate exam centers
				(centerSelect as HTMLSelectElement).disabled = false;
				districtCenters[selectedDistrict].forEach((center) => {
					const option = document.createElement("option");
					option.value = center;
					option.textContent = center;
					centerSelect.appendChild(option);
				});
			});
		});

		const submitButton =
			document.querySelector<HTMLButtonElement>("button#submit");
		const form = document.querySelector<HTMLFormElement>(
			"form#registration-form",
		);

		form.addEventListener("input", (event) => {
			const target = event.target;

			if (
				!(target instanceof HTMLInputElement) &&
				!(target instanceof HTMLSelectElement) &&
				!(target instanceof HTMLTextAreaElement)
			) {
				return;
			}

			if (!target.required) {
				return;
			}

			const isError = target.parentElement.className.includes("error");
			if (!isError) {
				return;
			}
			clearError(target.name);
		});

		submitButton.addEventListener("click", async () => {
			if (!validateRegistrationForm(form)) {
				return;
			}

			const requiredFields = form?.querySelectorAll(
				"input[required], select[required], textarea[required]",
			);
			let isValid = true;

			requiredFields?.forEach((field) => {
				const input = field as
					| HTMLInputElement
					| HTMLSelectElement
					| HTMLTextAreaElement;

				if (!input.value.trim()) {
					input.classList.add(
						"border",
						"border-red-500",
						"focus:ring-red-500",
						"border-width-4",
					);
					isValid = false;
				} else {
					input.classList.remove("border-red-500", "focus:ring-red-500");
				}
			});

			if (!isValid) {
				alert("Please fill in all required fields before submitting.");
				return;
			}

			const name = (document.getElementById("fullname") as HTMLInputElement)
				.value;
			const stream_option = Number(
				(document.getElementById("stream") as HTMLSelectElement).selectedIndex,
			);
			const stream_id =
				stream_option == 1
					? 2
					: stream_option == 2
						? 4
						: stream_option == 3
							? 3
							: stream_option == 4
								? 1
								: NaN;
			const medium = (document.getElementById("medium") as HTMLSelectElement)
				.value;
			const rank_district_id = (
				document.getElementById("rankDistrict") as HTMLSelectElement
			).selectedIndex; // adjust mapping as needed
			const exam_district_id = (
				document.getElementById("examDistrict") as HTMLSelectElement
			).selectedIndex; // adjust mapping as needed
			const exam_centre_id = (
				document.getElementById("examCenter") as HTMLSelectElement
			).selectedIndex; // adjust mapping as needed
			const nic = (document.getElementById("nic") as HTMLInputElement).value;
			const gender = (document.getElementById("gender") as HTMLSelectElement)
				.value;
			const email = (document.getElementById("email") as HTMLInputElement)
				.value;
			const telephone_no = (
				document.getElementById("phone") as HTMLInputElement
			).value;
			const school = (document.getElementById("school") as HTMLInputElement)
				.value;
			const address = (document.getElementById("address") as HTMLInputElement)
				.value;

			const dropzone = document.getElementById(
				"dropzone-file",
			) as HTMLInputElement;
			const transaction_file = dropzone.files?.[0];

			if (dropzone.files.length === 0) {
				// errorMessage.textContent = "Please upload a transaction file.";
				return;
			}

			try {
				const result = await registerStudent({
					name,
					stream_id,
					medium,
					rank_district_id,
					exam_district_id,
					exam_centre_id,
					nic,
					gender,
					email,
					telephone_no,
					school,
					address,
					transaction_file,
				});

				if (typeof result === "string" && result.startsWith("Failed")) {
					alert(result);
					return;
				}

				alert("Registration successful!");
			} catch (err) {
				console.error(err);
				alert("Something went wrong while submitting your registration.");
			}

			// const lang = window.location.pathname.split("/")[1];
			// window.location.href = `./submitted_details`;
		});

		const dropzone = document.getElementById("dropzone");
		const fileInput = document.getElementById(
			"dropzone-file",
		) as HTMLInputElement;

		if (dropzone && fileInput) {
			// When you drag files over
			dropzone.addEventListener("dragover", (e) => {
				e.preventDefault();
			});

			// When you drop files
			dropzone.addEventListener("drop", (e) => {
				e.preventDefault();

				const dt = (e as DragEvent).dataTransfer;
				if (!dt) return;

				const files = dt.files;
				if (files.length > 0) {
					fileInput.files = files;

					const label = (e.target as Element).closest("label");
					if (label) {
						const p = label.querySelector("p");
						if (p) p.textContent = `Selected: ${files[0].name}`;
					}
				}
			});

			// When user selects file(s) via file picker
			fileInput.addEventListener("change", () => {
				clearError("payment-receipt");

				const files = fileInput.files;
				if (files && files.length > 0) {
					// Get the label that wraps the file input
					const label = fileInput.parentElement; // This is the label element
					if (label) {
						const p = label.querySelector("p");
						if (p) p.textContent = `Selected: ${files[0].name}`;
					}
				}
			});
		}
	</script>
</div>

<style>
	label {
		@apply w-fit;
	}
	input,
	select,
	label {
		@apply cursor-pointer;
	}
	.error-message {
		@apply text-red-600 text-sm;
	}
	div.error {
		@apply text-red-600;

		input {
			@apply border-red-500 border-2 focus:ring-red-500;
		}
	}
</style>

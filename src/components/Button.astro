---
import type { HTMLAttributes } from "astro/types";

const VARIANTS = ["primary", "secondary", "outline"] as const;
type Variant = (typeof VARIANTS)[number];

const VARIANT_CLASSES: Record<Variant, string> = {
	primary:
		"primary text-lg text-center font-bold border-0 outline-ultra-violet-500 outline-2 outline rounded-lg",
	secondary: "",
	outline:
		"border-[2.5px] border-purple-600 bg-transparent text-purple-800 font-semibold focus-visible:border-purple-400",
};

interface Props extends HTMLAttributes<"button"> {
	variant?: Variant;
}

const { variant = "primary" } = Astro.props as Props;
---

<button
	class:list={["btn", VARIANT_CLASSES[variant], Astro.props.class]}
	{...Astro.props}
>
	<slot />
</button>

<style>
	.btn {
		@apply cursor-pointer;
		transition: all 0.3s cubic-bezier(0.02, 0.01, 0.47, 1);

		&:hover {
			animation: rotate 0.7s ease-in-out both;
		}
	}
	.btn.primary {
		color: #fff;
		background: linear-gradient(135deg, #852d91, #312a6c);
		padding: 12px 20px;
	}
	.btn.primary:hover {
		color: #cfcece;
		border: none;
		box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
	}

	/* .btn:hover:before,
	.btn:hover:after {
		opacity: 0.15;
	} */
	.btn:hover:before {
		transform: translate3d(50%, 0, 0) scale(0.9);
	}
	.btn:hover:after {
		transform: translate(50%, 0) scale(1.1);
	}
	@keyframes rotate {
		0% {
			transform: rotate(0deg);
		}
		25% {
			transform: rotate(3deg);
		}
		50% {
			transform: rotate(-3deg);
		}
		75% {
			transform: rotate(1deg);
		}
		100% {
			transform: rotate(0deg);
		}
	}
</style>

---
import type { GetStaticPaths } from "astro";
import { langStaticRoutes } from "../../i18n/ui";
import Layout from "../../layouts/Layout.astro";
import NavigationBar from "../../sections/1-navigation-bar.astro";
import { useTranslations, getLangFromUrl } from "../../i18n/utils";
import StudentRegistrationForm from "../../components/student-registration-form.astro";
import StudentRegistrationInstructions from "../../components/student-registration-instructions.astro";
import type { StudentRegistrationDetails } from "../../types";
import StudentRegistrationSuccess from "../../components/student-registration-success.astro";

const t = useTranslations(getLangFromUrl(Astro.url));

export const getStaticPaths = (() => {
	return langStaticRoutes;
}) satisfies GetStaticPaths;

let IS_FORM_AVAILABLE = false;
let REGISTRATION_FORM_OPEN = false;

const studentRegistrationDetails: StudentRegistrationDetails = {
	districts: [],
};

switch (typeof import.meta.env.REGISTRATION_FORM_OPEN) {
	case "string":
		REGISTRATION_FORM_OPEN = import.meta.env.REGISTRATION_FORM_OPEN === "true";
		break;
	case "boolean":
		REGISTRATION_FORM_OPEN = import.meta.env.REGISTRATION_FORM_OPEN;
		break;
	case "undefined":
		throw new Error("REGISTRATION_FORM_OPEN is not defined");
	default:
		throw new Error("REGISTRATION_FORM_OPEN has an invalid type");
}

try {
	console.log("process.env.PUBLIC_API_URL:", import.meta.env.PUBLIC_API_URL);
	const response = await fetch(
		import.meta.env.PUBLIC_API_URL + "/student-registration/details",
	);
	const data = await response.json();

	if (!data || !data.districts) {
		throw new Error("Invalid data format");
	}
	console.log("Fetched /student-registration/details");
	studentRegistrationDetails.districts = data.districts;

	console.log(
		"process.env.REGISTRATION_FORM_OPEN:",
		import.meta.env.REGISTRATION_FORM_OPEN,
	);

	IS_FORM_AVAILABLE = REGISTRATION_FORM_OPEN;
	console.log(
		"Student Registration Form Availability:",
		IS_FORM_AVAILABLE ? "Open" : "Closed",
	);
} catch (error) {
	console.error("Error fetching student registration details:", error);
}
---

<Layout pageTitle={t("student_register__title")}>
	<div class="bg-purple-800">
		<NavigationBar />
	</div>
	<main
		class="px-[var(--body-margin-x)] pb-10 grid grid-cols-1 grid-rows-[auto_1fr] gap-6"
	>
		<h1 class="text-4xl col-span-full font-bold mb-0">
			{t("student_register__title")}
		</h1>

		{
			IS_FORM_AVAILABLE ? (
				<>
					<StudentRegistrationInstructions />
					<StudentRegistrationForm
						additionalDetails={studentRegistrationDetails}
					/>
					<StudentRegistrationSuccess />
				</>
			) : (
				<p class="col-span-full">{t("student_register__form_unavailable")}</p>
			)
		}
	</main>
</Layout>

<style>
	ul li > span:first-child::before {
		@apply mr-2;
		content: "-";
	}
	ul li label {
		@apply font-bold;
	}
</style>
